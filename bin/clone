#!/usr/bin/env node

"use strict";

/**********************************************************************
 * Libraries
 *********************************************************************/

const config = require('../config/config.js');

/**********************************************************************
 * Logging Options:
 *   logging - Enables any logging at all
 *   debug - Enable extra output to help debug problem
 *   verbose - OMG, you must be developing.  You probably don't want
 *   $others - Any can be enabled/disabled but default to enabled
 *********************************************************************/

const log = require('iphb-logs');
const prompt = require('prompt');

/**********************************************************************
 * Help Text
 *********************************************************************/

/**
 * Dynamically allow any config in our configuration file be
 * overridden on the command line.
 */
let _configOverrides = [];
for (let key in config) {
  _configOverrides.push(`  --${key} <${key}>`);
}

/**
 * See Docopts Syntax here:
 *   http://bit.ly/1EQXdRe
 */
const help = `
Usage:
  clone <repo>
  clone [options]

Options:
  -c --config                      Display the Environment
  -d --debug                       Enable Debug Log Output
  -f --forceCacheUpdate            Purge the current repo cache
  -h --help                        Show this help
  -s --search <repo>               Search for repo named $repo
  -v --verbose                     Enable Verbose Log Output

Additional Options:
${_configOverrides.join('\n')}

Cache all repos for the orgs or users specified in the GITHUB_ORGS
environment variable.

Examples:

  # clone --githubOrgs 'org1,org1,org3'

  Orgs in your environment

  # export GITHUB_ORGS="org1,org1,org3"
  # clone

  Trim the results by providing a search

  # clone 'search'
`;

/** Process The Docopts */
const docopt = require('docopt').docopt;
const options = docopt(help);

/** Handle dynamic config overrides */
for (let option in options) {
  if (options.hasOwnProperty(option) && options[option] && options[option] !== null) {
    const optionWithoutDashes = option.replace(/^--/, "");
    config[optionWithoutDashes] = options[option];
  }
}

/** Respect log config */
log.enable.debug = config.debug || config.verbose;
log.enable.verbose = config.verbose;

/********************************************************************
 * Imports
 ********************************************************************/

const api = require('../lib/api.js');
const fs = require('fs-promise');

/**********************************************************************
 * Support Overriding Any Config By command line
 *********************************************************************/

// Emit our command line options if debug is set
log.debug("Command Line Settings:", options);

/**@
 * Output our environment and quit
 */
if (options['--config']) {
  // Force logging enabled
  log.enable.logging = true;

  // Make output look nice
  let _message = [];
  for (let key in config) {
    _message.push(`${key}=${config[key]}`);
  }
  log.info(`
------------------------------------------------------------------
Configuration:
------------------------------------------------------------------
${_message.join('\n')}
------------------------------------------------------------------
`);
  process.exit(0);
}

/**********************************************************************
 * Helpers
 *********************************************************************/

const _error = error => {
  log.error(error.message);
  log.verbose(error.stack);
  process.exit(1);
};

const _getUsersSelection = repos => new Promise((resolve, reject) => {
  prompt.message = "";
  prompt.delimiter = "";
  prompt.start();
  prompt.get([{
      name: "Repo"
    }],
    (error, result) => error
    ? reject(error)
    : resolve(repos[result.repo]));
});

/**
 * If the argument for purging the cache is set on the
 * command line we will delete the file which triggers
 * a cache update
 * @return {Promise}   A promise when the action is complete
 */
const _purgeCacheFile = () => config.forceCacheUpdate
  ? fs.unlink(config.repoCacheFile)
  : Promise.resolve();

/**********************************************************************
 * Guards
 *********************************************************************/

/* No point in continuing without ORGS specified */
if (!config.githubOrgs) {
  log.help(help);
  _error(new Error("Must specify GitHub Org(s) to cache"));
}

/**********************************************************************
 * Main
 *********************************************************************/

config.search = config['<repo>'] || config.search;

_purgeCacheFile()
  .then(() => api.github.getGithubReposByOrg(config.githubOrgs.split(',')))
  .then(repos => config.search
    ? repos.filter(repo => ~repo.name.toLowerCase().indexOf(config.search.toLowerCase()))
    : repos)
  .then(repos => repos.map((repo, index) => {
    log.info(`[${index}]: ${repo.full_name}`);
    return repo;
  }))
  .then(repos => _getUsersSelection(repos))
  .then(repo => api.shell.run(`git clone ${repo.ssh_url}`))
  .then(results => log.info(results[2]))
  .then(() => process.exit(0))
  .catch(e => _error(e));
